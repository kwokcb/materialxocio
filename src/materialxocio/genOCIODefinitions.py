#!/usr/bin/env python
'''

The script will generate MaterialX definitions for all color spaces found in the
ACES Cg Config` and `ACES Studio Config` configurations. 

For source code generation 
- The definitions will be generated for the following MaterialX targets:
    - GLSL
- The resulting output is:
    - A color4 implementation file containing the source code generated by OCIO.
    - A color3 node graph implementation which uses the color4 implementation (nodegraph)  
    - A file with both color3 and color4 MaterialX definitions (nodedef).
    - A MaterialX file containing implementation declarations for color3 and color4 variants.

For functional node graph generation:
- The definition will generate a `nodegraph` and `nodedef`pair based on the
transforms returned from the OCIO processor. 
- Currently only a `color3 variant is generated.

Additonaly, the script will generate a markdown file with information about the built-in configurations.
'''

import os, argparse
import MaterialX as mx
import PyOpenColorIO as OCIO
import core as mxocio

def main():
    parser = argparse.ArgumentParser(description="Create Materialx definitions using OCIO.")
    parser.add_argument('--graph', dest='graph', help='Generate a node graph implementations instead of source code.', action='store_true')
    parser.add_argument('--outputPath', dest='outputPath', help='File path to output material files to.')

    opts = parser.parse_args()
    outputPath = mx.FilePath("./data/")
    if opts.outputPath:
        outputPath = mx.FilePath(opts.outputPath)

    # Check OCIO version
    ver = OCIO.GetVersion()
    ocioVersion = ver.split('.')
    if len(ocioVersion) < 2:
        print('OCIO version is not in the expected format.')
        return
    if int(ocioVersion[0]) < 2 or int(ocioVersion[1]) < 2:
        print('OCIO version 2.2 or greater is required.')
        return
    
    print('OCIO version:', ver)
    print('MaterialX version:', mx.getVersionString())

    # Get the OCIO built in configs and write out the configuration information
    # to a markdown file.
    generator = mxocio.OCIOMaterialaxGenerator()
    configs, aconfig = generator.getBuiltinConfigs()
    md = generator.printConfigs(configs)
    # Save configuration information as markdown
    if not os.path.exists(outputPath.asString()):
        os.makedirs(outputPath.asString())    
    configInfoFile = outputPath / mx.FilePath('OCIO_configurations.md')
    print('Write out OCIO configurations to: ' + configInfoFile.asString())
    f = open(configInfoFile.asString(), 'w')
    f.write(md)

    sourceColorSpace = "acescg"
    targetColorSpace = 'lin_rec709'

    # All code has the same input name
    # It is possible to use a different name than the name used in the generated function ('inPixel')
    IN_PIXEL_STRING = 'in'

    # Generate MaterialX definitions and implementations for all color spaces
    # found in the ACES Cg Config and ACES Studio Config configurations.
    for c in configs:
        config = configs[c][0]
        for colorSpace in config.getColorSpaces():
            aliases = colorSpace.getAliases()
            trySource = ''
            for alias in aliases:
                # Get alias if it does not contain a space
                if ' ' not in alias:
                    trySource = alias
            if not trySource:
                trySource = colorSpace.getName()
            if trySource:
                sourceColorSpace = trySource

                # Skip if the source and target are the same
                if sourceColorSpace == targetColorSpace:
                    continue

                print('--- Generate transform for source color space:', trySource, '---')

                # Generate source code
                if not opts.graph:
                    definitionDoc = mx.createDocument()
                    implDoc = mx.createDocument()

                    definition, transformName, code, extension, target = generator.generateOCIO(aconfig, definitionDoc, implDoc, sourceColorSpace, targetColorSpace, 'color4')

                    # Write the definition, implementation and source code files 
                    if definition:

                        filename = outputPath / mx.FilePath(definition.getName() + '.' + 'mtlx')
                        print('Write MaterialX definition file:', filename.asString())
                        mx.writeToXmlFile(definitionDoc, filename)

                        # Write the implementation document
                        implFileName = outputPath / mx.FilePath('IM_' + transformName + '.' + 'mtlx')
                        print('Write MaterialX implementation file:', implFileName.asString())
                        result = mx.writeToXmlFile(implDoc, idmplFileName)

                        generator.writeShaderCode(outputPath, code, transformName, extension, target)
                else:
                    # Generate node graph
                    outputType = 'color3'
                    graphDoc = generator.generateOCIOGraph(aconfig, sourceColorSpace, targetColorSpace, outputType)
                    if graphDoc:
                        transformName = generator.createTransformName(sourceColorSpace, targetColorSpace, outputType, 'mxgraph_')
                        filename = outputPath / mx.FilePath(transformName + '.' + 'mtlx')
                        print('Write MaterialX node graph definition file:', filename.asString())
                        mx.writeToXmlFile(graphDoc, filename)

            else:
                print('Could not find suitable color space name to use: ', colorSpace.getName())


if __name__ == '__main__':
    main()